# Generated by Django 3.1.7 on 2021-04-24 13:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import main.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("username", models.CharField(max_length=150, unique=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "role",
                    models.CharField(choices=[("admin", "admin"), ("user", "user")], default="user", max_length=50),
                ),
                ("birthdate", models.DateField(blank=True, null=True)),
                ("profile_pic", models.ImageField(blank=True, null=True, upload_to="")),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "profile",
            },
            managers=[
                ("objects", main.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Basket",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=32)),
                ("delivery_address", models.CharField(max_length=500, null=True)),
                ("favourite", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="baskets", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "basket",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "db_table": "category",
            },
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=256)),
                ("price", models.DecimalField(decimal_places=2, max_digits=1000)),
                ("icon", models.ImageField(blank=True, null=True, upload_to="")),
                ("amount", models.IntegerField()),
                ("kcal", models.IntegerField(blank=True, null=True)),
                ("proteins", models.IntegerField(blank=True, null=True)),
                ("fats", models.IntegerField(blank=True, null=True)),
                ("carbohydrates", models.IntegerField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="category_items",
                        to="main.category",
                    ),
                ),
            ],
            options={
                "db_table": "item",
            },
        ),
        migrations.CreateModel(
            name="Shop",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("site", models.URLField()),
                ("name", models.CharField(max_length=32)),
                ("address", models.CharField(max_length=500)),
            ],
            options={
                "db_table": "shop",
            },
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("code", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Status",
                "verbose_name_plural": "Statuses",
                "db_table": "status",
            },
        ),
        migrations.CreateModel(
            name="Sale",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ("from_date", models.DateTimeField()),
                ("to_date", models.DateTimeField()),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="sales", to="main.item"
                    ),
                ),
            ],
            options={
                "verbose_name": "Sale",
                "verbose_name_plural": "Sales",
                "db_table": "sale",
            },
        ),
        migrations.CreateModel(
            name="PurchaseHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount_purchased", models.IntegerField()),
                ("item_price_at_the_moment", models.DecimalField(decimal_places=2, max_digits=1000)),
                ("sale_at_the_moment", models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="purchases", to="main.item"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase history",
                "verbose_name_plural": "Purchase history",
                "db_table": "purchase_history",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("required_amount", models.IntegerField()),
                (
                    "basket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="basket_items", to="main.basket"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="orders", to="main.item"
                    ),
                ),
            ],
            options={
                "db_table": "basket_item",
            },
        ),
        migrations.CreateModel(
            name="ItemLike",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("item", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main.item")),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="likes", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "item_like",
            },
        ),
        migrations.CreateModel(
            name="ItemComment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
                ("item", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main.item")),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "item_comment",
            },
        ),
        migrations.AddField(
            model_name="item",
            name="shop",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="items", to="main.shop"),
        ),
        migrations.AddField(
            model_name="basket",
            name="status",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="baskets", to="main.status"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="favourite_categories",
            field=models.ManyToManyField(
                db_table="user_favourite_category", to="main.Category", verbose_name="Favourite category"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
    ]
